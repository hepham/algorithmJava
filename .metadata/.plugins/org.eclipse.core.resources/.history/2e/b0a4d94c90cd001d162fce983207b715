import java.util.*;

public class ShortestPath {

    // Define a class to represent a node in the graph
    static class Node {
        int val; // Node value
        int turns; // Number of turns
        String path; // Path from source node
        public Node(int val, int turns, String path) {
            this.val = val;
            this.turns = turns;
            this.path = path;
        }
    }

    // Function to find shortest path with minimum turns in a weighted graph
    public static String bfsShortestPath(int[][] graph, int source, int dest) {
        int n = graph.length;

        // Create a boolean array to mark visited nodes
        boolean[] visited = new boolean[n];

        // Create a queue for BFS
        Queue<Node> queue = new LinkedList<>();

        // Enqueue the source node
        queue.offer(new Node(source, 0, ""+source));

        // Mark the source node as visited
        visited[source] = true;

        // Loop until the queue is empty
        while (!queue.isEmpty()) {
            // Dequeue a node from the queue
            Node node = queue.poll();

            // Check if the destination node is reached
            if (node.val == dest) {
                return node.path; // Return the shortest path
            }

            // Explore the neighbors of the node
            for (int i = 0; i < n; i++) {
                if (graph[node.val][i] > 0 && !visited[i]) {
                    int turns = node.turns + (i != node.val ? 1 : 0); // Increase the turn count if the new node is not the same as the previous node
                    queue.offer(new Node(i, turns, node.path + "->" + i)); // Enqueue the new node
                    visited[i] = true; // Mark the new node as visited
                }
            }
        }

        return ""; // Return an empty path if the destination node is not reachable
    }

    public static void main(String[] args) {
        int[][] graph = {{0, 2, 0, 0, 0}, {2, 0, 1, 3, 0}, {0, 1, 0, 2, 0}, {0, 3, 2, 0, 1}, {0, 0, 0, 1, 0}};
        int source = 0, dest = 4;
        String shortestPath = bfsShortestPath(graph, source, dest);
        System.out.println("Shortest path with minimum turns from " + source + " to " + dest + " is " +shortestPath);}