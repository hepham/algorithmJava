package Graph;
import java.util.*;

public class Dijkstra {

    private static int n; // số đỉnh
    private static int[][] graph; // ma trận trọng số của đồ thị
    private static int[] dist; // khoảng cách ngắn nhất từ đỉnh bắt đầu đến đỉnh i
    private static boolean[] visited; // đánh dấu các đỉnh đã được thăm

    public static void dijkstra(int start) {
        // Khởi tạo khoảng cách ban đầu
        for (int i = 0; i < n; i++) {
            dist[i] = Integer.MAX_VALUE;
            visited[i] = false;
        }
        dist[start] = 0;

        // Duyệt các đỉnh
        for (int i = 0; i < n - 1; i++) {
            int u = minDistance(dist, visited);
            visited[u] = true;

            // Cập nhật khoảng cách ngắn nhất
            for (int v = 0; v < n; v++) {
                if (!visited[v] && graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE
                        && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }
    }

    // Tìm đỉnh có khoảng cách ngắn nhất chưa được thăm
    private static int minDistance(int[] dist, boolean[] visited) {
        int minDist = Integer.MAX_VALUE, minIndex = -1;
        for (int i = 0; i < n; i++) {
            if (!visited[i] && dist[i] <= minDist) {
                minDist = dist[i];
                minIndex = i;
            }
        }
        return minIndex;
    }

    public static void main(String[] args) {
        n = 5;
        graph = new int[][] { { 0, 2, 0, 0, 0 }, { 2, 0, 1, 3, 0 }, { 0, 1, 0, 2, 0 }, { 0, 3, 2, 0, 1 }, { 0, 0, 0, 1, 0 } };
        dist = new int[n];
        visited = new boolean[n];

        dijkstra(0);

        System.out.println("Khoảng cách ngắn nhất từ đỉnh 0 đến các đỉnh khác:");
        for (int i = 0; i < n; i++) {
            System.out.println("Đỉnh " + i + ": " + dist[i]);
        }
    }
}
